#!/usr/bin/env python3

import sys, socket, select, time, json, random

LAST = 0


def dump(thing, sock):
  """
  Sends a json message through the given socket
  :param thing: the json object
  :param sock: the socket
  """
  sock.send(json.dumps(thing).encode())


def load(thing):
  """
  Converts a given json string to a json object
  :param thing: the string to convert
  """
  return json.loads(thing.decode('utf-8'))


def set_last(x):
  """
  Sets the global last variable to the given value
  :param x: the new timestamp
  """
  global LAST
  LAST = x


def debug(sent, mid, type, src, leader):
  """
  A debug print message
  :param sent: whether this message was sent or received
  :param mid: the message id to use
  :param type: the type of message
  :param src: where this message came from
  :param leader: the leader's id
  """
  #print('[%s] %s msg: %s with type: %s for %s. Leader: %s' % (sys.argv[1], sent, mid, type, src, leader))
  #pass

def candidate_from_follower(follower):
  """
  Constructs a Candidate from a follower
  :param follower: the follower to be used
  :return: the constructed candidate
  """
  candidate = Candidate(follower.id, follower.replicas, follower.sock, follower.term + 1)
  candidate.queue = follower.queue
  candidate.log = follower.log
  candidate.data = follower.data
  candidate.commitIndex = follower.commitIndex
  candidate.lastApplied = follower.lastApplied
  return candidate


def format_json(src, dst, leader, type, mid):
  """
  Constructs a dictionary given the src, dst, leader, type, mid values
  :param src: the message source
  :param dst: the message destination
  :param leader: the current term's leader
  :param type: the type of message
  :param mid: the id of the message
  :return: a dict with the given key value pairs
  """
  return {'src': src, 'dst': dst, 'leader': leader, 'type': type, 'MID': mid}


class Follower:
  """
  A class that handles all communications to a shard that is a follower/candidate
  """
  def __init__(self, candidate, leader, term):
    self.leader = leader
    self.id = candidate.id
    self.term = term
    self.replicas = candidate.replicas
    self.sock = candidate.sock
    self.n = 1 + len(candidate.replicas)
    self.queue = candidate.queue
    self.data = candidate.data
    self.log = candidate.log
    self.commitIndex = candidate.commitIndex
    self.lastApplied = candidate.lastApplied
    self.timeout = 1
    print('%s just became a follower' % self.id)

  def handle_msg(self, msg):
    """
    Delegates the message according to the type
    :param msg: the message to handle
    :return: the new shard object
    """
    debug('received', msg['MID'], msg['type'], msg['src'], self.leader)
    if msg['type'] == 'get' or msg['type'] == 'put':
      return self.handle_client(msg)
    elif msg['type'] == 'election':
      return self.handle_election(msg)
    elif msg['type'] == 'heartbeat' and msg['src'] == self.leader:
      set_last(time.time())
      return self.handle_heartbeat(msg)
    else:
      return self

  def handle_heartbeat(self, msg):
    """
    Reads the append entries and responds with the state of the log
    :param msg: the heartbeat
    :return: self
    """
    term = int(msg['term'])
    prevLogIndex = int(msg['prevLogIndex'])
    prevLogTerm = int(msg['prevLogTerm'])
    if term < self.term or prevLogIndex >= len(self.log) or \
        self.log[prevLogIndex]['term'] > prevLogTerm:
      print('Term? Me: %s Leader: %s, Log Index? Me: %s Leader: %s, Log Term? Me: %s Leader: %s' %
            (self.term, term, len(self.log), prevLogIndex, self.log[min(prevLogIndex, len(self.log) - 1)]['term'], prevLogTerm))
      d = format_json(self.id, msg['src'], self.leader, 'not ready', msg['MID'])
      d['lastAppendedIndex'] = self.commitIndex
      dump(d, self.sock)
    else:
      self.log = self.log[:prevLogIndex + 1]
      self.log += msg['entries']
      d = format_json(self.id, msg['src'], self.leader, 'ready', msg['MID'])
      d['lastAppendedIndex'] = len(self.log) - 1
      dump(d, self.sock)
      leaderCommit = int(msg['leaderCommit'])
      if leaderCommit > self.commitIndex:
        self.commit(min(leaderCommit, len(self.log) - 1))
    return self

  def commit(self, end):
    for i in range(self.commitIndex + 1, end + 1):
      msg = self.log[i]['msg']
      if 'value' in msg:
        self.data[msg['key']] = msg['value']
        print('%s INDEX: %s COMMITTED %s : %s' % (self.id, i, msg['key'], msg['value']))
      self.commitIndex = i

  def handle_election(self, msg):
    """
    handles election messages
    :param msg: the election message
    :return: self
    """
    term = int(msg['term'])
    lastIndex = int(msg['lastLogIndex'])
    lastTerm = int(msg['lastLogTerm'])
    if (term > self.term or (term == self.term and msg['src'] == self.leader)) \
        and (lastTerm > self.log[-1]['term'] or
        (lastIndex > len(self.log) - 1 and lastTerm == self.log[-1]['term'])):
      self.term = term
      self.leader = msg['src']
      dump(format_json(self.id, msg['src'], msg['src'], 'vote', msg['MID']), self.sock)
      debug('sent', msg['MID'], 'vote', msg['src'], self.leader)
      return self
    else:
      debug('sent', msg['MID'], 'novote', msg['src'], self.leader)
      return self

  def handle_client(self, msg):
    """
    handles client get and put messages
    :param msg: the message to handle
    :return: self
    """
    self.queue.append(msg)
    while self.queue:
      msg = self.queue.pop(0)
      src = msg['src']
      mid = msg['MID']
      dump(format_json(self.id, src, self.leader, 'redirect', mid), self.sock)
      debug('sent', mid, 'redirect', src, self.leader)
    return self

  def handle_timeout(self):
    """
    Handles a timeout and determines voting policies
    :return:
    """
    return candidate_from_follower(self)

  def is_leader(self):
    print('%s: Data: %s Log: %s' % (self.id, self.data, self.log))


class Candidate:
  """
  Represents a replica in the Candidate state
  """
  def __init__(self, id, replicas, sock, term):
    self.id = id
    self.replicas = replicas
    self.sock = sock
    self.n = 1 + len(replicas)
    self.queue = []
    self.quorum = set()
    self.data = {}
    self.term = term
    self.log = [{'term': term, 'msg': ''}]
    self.commitIndex = 0
    self.lastApplied = 0
    self.timeout = random.random() * 0.15 + 0.15
    print('%s just became a candidate' % id)

  def handle_msg(self, msg):
    """
    Handles a message received
    :param msg: the message
    :return: the resulting candidate, follower, or leader
    """
    debug('received', msg['MID'], msg['type'], msg['src'], 'candidate')
    if msg['type'] == 'get' or msg['type'] == 'put':
      self.queue.append(msg)
      return self
    elif msg['type'] == 'election':
      return self.handle_election(msg)
    elif msg['type'] == 'vote':
      return self.handle_vote(msg)
    else:
      return self

  def handle_vote(self, msg):
    """
    Handles a vote message
    :param msg: the vote message
    :return: the resulting candidate or leader
    """
    self.quorum.add(msg['src'])
    if len(self.quorum) >= (self.n // 2):
      return Leader(self)
    else:
      return self

  def handle_election(self, msg):
    """
    Handles an election message
    :param msg: the election message
    :return: the resulting candidate or follower
    """
    term = int(msg['term'])
    lastIndex = int(msg['lastLogIndex'])
    lastTerm = int(msg['lastLogTerm'])
    if term > self.term and (lastIndex >= len(self.log) - 1 or \
            lastTerm >= self.log[lastIndex]['term']):
      dump(format_json(self.id, msg['src'], msg['src'], 'vote', msg['MID']), self.sock)
      debug('sent', msg['MID'], 'vote', msg['src'], 'candidate')
      return Follower(self, msg['src'], term)
    else:
      debug('sent', msg['MID'], 'novote', msg['src'], 'candidate')
      return self

  def handle_timeout(self):
    """
    Handles a timeout
    :return: the candidate
    """
    if self.timeout < 1:
      self.timeout = 1
      self.term += 1
      self.election()
    else:
      self.timeout = random.random() * 0.15 + 0.15
    return self

  def election(self):
    """
    Sends out election messages to all other shards
    """
    d = format_json(self.id, 'FFFF', self.id, 'election', 0)
    d['term'] = self.term
    lastIndex = len(self.log) - 1
    d['lastLogIndex'] = lastIndex
    d['lastLogTerm'] = self.log[lastIndex]['term']
    dump(d, self.sock)

  def is_leader(self):
    print('%s: Data: %s Log: %s' % (self.id, self.data, self.log))


class Leader:
  """
  A leader shard
  """
  def __init__(self, candidate):
    self.id = candidate.id
    self.term = candidate.term
    self.replicas = candidate.replicas
    self.sock = candidate.sock
    self.n = candidate.n
    self.queue = candidate.queue
    self.data = candidate.data
    self.log = candidate.log
    self.commitIndex = candidate.commitIndex
    self.lastApplied = candidate.lastApplied
    self.nextIndex = [len(candidate.log) for x in candidate.replicas]
    self.timeout = 0.12
    self.quorum = self.init_quorum()
    print('%s just became the leader INDEX: %s LOG: %s' % (candidate.id, self.commitIndex, len(self.log)))

  def is_leader(self):
    print('%s: Data: %s Log: %s' % (self.id, self.data, self.log))

  def init_quorum(self):
    """
    initializes the quorum dictionary to include all of the uncommitted log entries
    :return: the quorum dictionary
    """
    d = {}
    for i in range(self.commitIndex + 1, len(self.log)):
      print('INITIALIZED QUORUM FOR %s' % i)
      d[i] = set()
    return d

  def handle_msg(self, msg):
    """
    Delegates all messages, of which the leader only cares about client and election messages
    :param msg: the message to handle
    :return: the corresponding shard
    """
    debug('received', msg['MID'], msg['type'], msg['src'], self.id)
    type = msg['type']
    if type == 'get' or type == 'put':
      return self.handle_client(msg)
    elif type == 'ready' or type == 'not ready':
      return self.handle_response(msg)
    elif type == 'election':
      return self.handle_election(msg)
    else:
      return self

  def handle_response(self, msg):
    """
    Handles responses from follower shards, and determines whether quorum has been
    reached and commits what it can
    :param msg: the msg to handle
    :return: self
    """
    index = self.replicas.index(msg['src'])
    lastLogIndex = int(msg['lastAppendedIndex']) + 1
    if msg['type'] == 'not ready':
      self.nextIndex[index] = lastLogIndex
    else:
      for i in range(self.nextIndex[index], lastLogIndex):
        if i in self.quorum:
          self.quorum[i].add(msg['src'])
      self.commit(lastLogIndex)
      self.nextIndex[index] = lastLogIndex
    return self

  def commit(self, end):
    """
    Commits all messages from the log up until the end index
    :param end: the index to commit until
    """
    for i in range(self.commitIndex + 1, end):
      if i not in self.quorum:
        print('BROKE HERE')
        break
      if len(self.quorum[i]) >= self.n // 2:
        del self.quorum[i]
        self.commitIndex = i
        print('LEADER COMMITTED %s' % i)
        m = self.log[i]['msg']
        d = format_json(self.id, m['src'], self.id, 'ok', m['MID'])
        if m['type'] == 'put':
          self.data[m['key']] = m['value']
          dump(d, self.sock)
          print('%s replied %s' % (self.id, d))
        elif m['type'] == 'get':
          d['value'] = self.data[m['key']] if m['key'] in self.data else ''
          dump(d, self.sock)
          print('%s replied %s' % (self.id, d))
        else:
          print('PROBLEM COMMITTING %s' % i)
          break

  def handle_election(self, msg):
    """
    Handles incoming election messages
    :param msg: the election message
    :return: either the current leader or a follower, dependent on whether the new leader has
    a higher term than the current leader
    """
    term = int(msg['term'])
    if term > self.term:
      dump(format_json(self.id, msg['src'], msg['src'], 'vote', msg['MID']), self.sock)
      debug('sent', msg['MID'], 'vote', msg['src'], self.id + ' is leader')
      return Follower(self, msg['src'], term)
    else:
      debug('sent', msg['MID'], 'novote', msg['src'], self.id + ' is leader')
      return self

  def handle_client(self, msg):
    """
    Handles a client message
    :param msg: the get or put to handle
    :return: self
    """
    self.queue.append(msg)
    while self.queue:
      m = self.queue.pop(0)
      self.quorum[len(self.log)] = set()
      self.log_message(m)
      print('%s INDEX: %s received %s' % (self.id, len(self.log) - 1, m))
      debug('sent', m['MID'], m['type'], m['src'], self.id + ' is leader')
    return self.handle_timeout()

  def handle_timeout(self):
    """
    Sends a heartbeat to all other shards that contains any log updates.
    """
    set_last(time.time())
    for replica, index in zip(self.replicas, self.nextIndex):
      d = format_json(self.id, replica, self.id, 'heartbeat', 0)
      d['term'] = self.term
      d['prevLogIndex'] = index - 1
      d['prevLogTerm'] = self.log[index - 1]['term']
      d['entries'] = self.log[index:] if len(self.log[index:]) <= 25 else self.log[index:index + 25]
      d['leaderCommit'] = self.commitIndex
      dump(d, self.sock)
    print('%s Commit Index: %s Rest of Log: %s' % (self.id, self.commitIndex, len(self.log[self.commitIndex + 1:])))
    return self

  def log_message(self, msg):
    """
    Adds a put request to the back of the log
    """
    self.log.append({'term': self.term, 'msg': msg})




# Your ID number
my_id = sys.argv[1]

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
sock.connect(my_id)

shard = Candidate(my_id, replica_ids, sock, 0)
time.sleep(0.1)

started = time.time()

while True:

  if time.time() - started >= 28 + random.random():
    shard.is_leader()
    started = time.time()

  ready = select.select([shard.sock], [], [], 0.01)[0]

  if shard.sock in ready:
    msg_raw = shard.sock.recv(32768)

    if len(msg_raw) > 0:
      msg = load(msg_raw)
      shard = shard.handle_msg(msg)

  timestamp = time.time()
  if timestamp - LAST > shard.timeout:
    shard = shard.handle_timeout()
    set_last(timestamp)